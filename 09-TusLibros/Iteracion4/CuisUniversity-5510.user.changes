

----QUIT----(22 August 2022 12:39:39) CuisUniversity-5510.image priorSource: 2778666!

----STARTUP---- (22 August 2022 12:39:39) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5510.image!


----QUIT----(22 August 2022 12:39:39) CuisUniversity-5510.image priorSource: 7018121!

----STARTUP---- (7 November 2022 21:23:10) as /home/clinux01/Escritorio/linux64/CuisUniversity-5510.image!


----End fileIn of /home/clinux01/Escritorio/linux64/Packages/System/Collections-CompactArrays.pck.st----!

----End fileIn of /home/clinux01/Escritorio/linux64/Packages/Features/Compression.pck.st----!

----End fileIn of /home/clinux01/Escritorio/linux64/Packages/Features/Sound.pck.st----!

----End fileIn of /home/clinux01/Escritorio/linux64/Packages/Features/Cryptography-DigitalSignatures.pck.st----!

----End fileIn of /home/clinux01/Escritorio/linux64/Packages/Features/Identities-UUID.pck.st----!

----End fileIn of /home/clinux01/Escritorio/linux64/Packages/System/Network-Kernel.pck.st----!

----End fileIn of /home/clinux01/Escritorio/WebClient.pck.st----!

----End fileIn of /home/clinux01/Escritorio/TusLibros-Model Ejercicio it4.st----!

----End fileIn of /home/clinux01/Escritorio/TusLibrosREST Ejercicio it4.st----!

----End fileIn of /home/clinux01/Escritorio/TusLibros-Tests Ejercicio it4.st----!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:27:19'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:27:21'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:27:33'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:27:35'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'MSS 11/7/2022 21:37:53' prior: 50588465!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore |

	bookPerformance := Dictionary new.
	
	readySemaphore := Semaphore new.
	
	totalSales := [self totalSalesOf: anItem. readySemaphore signal.] fork.
	
	totalMoney := self totalMoneyRaisedBy: anItem. 
	
	readySemaphore wait.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:38:02'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:38:24'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:38:40'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:38:41'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'MSS 11/7/2022 21:40:08' prior: 50590499!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore |

	bookPerformance := Dictionary new.
	
	readySemaphore := Semaphore new.
	
	totalSales := [self totalSalesOf: anItem. readySemaphore signal.] fork.
	
	totalMoney := self totalMoneyRaisedBy: anItem. 
	
	readySemaphore wait.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'MSS 11/7/2022 21:41:34' prior: 50590536!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore |

	bookPerformance := Dictionary new.
	
	readySemaphore := Semaphore new.
	
	totalSales := [self totalSalesOf: anItem. readySemaphore signal.] fork.
	
	totalMoney := self totalMoneyRaisedBy: anItem. 
	
	readySemaphore wait.
	readySemaphore wait.
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'MSS 11/7/2022 21:42:21' prior: 50590558!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore |

	bookPerformance := Dictionary new.
	
	readySemaphore := Semaphore new.
	
	totalSales := [self totalSalesOf: anItem. readySemaphore signal.] fork.
	
	totalMoney := self totalMoneyRaisedBy: anItem. readySemaphore signal.
	
	readySemaphore wait.
	readySemaphore wait.
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:42:35'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:42:36'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'MSS 11/7/2022 21:45:21' prior: 50590580!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore |

	bookPerformance := Dictionary new.
	
	readySemaphore := Semaphore new.
	
	totalSales := [|a| a:=(self totalSalesOf: anItem). readySemaphore signal. a] fork.
	
	totalMoney := self totalMoneyRaisedBy: anItem. readySemaphore signal.
	
	readySemaphore wait.
	readySemaphore wait.
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:45:31'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:45:32'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'MSS 11/7/2022 21:53:06' prior: 50590611!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore |

	bookPerformance := Dictionary new.
	
	readySemaphore := Semaphore new.
	
	[totalSales :=(self totalSalesOf: anItem). readySemaphore signal.] fork.
	
	totalMoney := self totalMoneyRaisedBy: anItem. readySemaphore signal.
	
	readySemaphore wait.
	readySemaphore wait.
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:53:27'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:53:34'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'MSS 11/7/2022 21:54:05' prior: 50590642!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore |

	bookPerformance := Dictionary new.
	
	readySemaphore := Semaphore new.
	
	[totalSales :=(self totalSalesOf: anItem). readySemaphore signal.] fork.
	
	totalMoney := self totalMoneyRaisedBy: anItem. 
	
	readySemaphore wait.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:54:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:54:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:54:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:54:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:54:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:54:20'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'MSS 11/7/2022 21:57:13' prior: 50588506!
storePerformance

	| totalMoney totalSales performance semaphor |
	
	performance := Dictionary new.
	
	semaphor := Semaphore new.
	[totalSales := self totalSales. semaphor signal ] fork.
	totalMoney := self totalMoneyRaised.
	
	semaphor wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:57:22'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:57:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:57:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'MSS 11/7/2022 21:57:37'!
PASSED!


----STARTUP---- (8 November 2022 18:49:49) as /home/marco/Desktop/linux64/CuisUniversity-5510.image!


----End fileIn of /home/marco/Desktop/Ingsoft-1/09-TusLibros/TusLibros.st----!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/8/2022 18:52:50'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'MSS 11/8/2022 18:52:53'!
PASSED!

----End fileIn of /home/marco/Desktop/linux64/Packages/System/Collections-CompactArrays.pck.st----!

----End fileIn of /home/marco/Desktop/linux64/Packages/Features/Compression.pck.st----!

----End fileIn of /home/marco/Desktop/linux64/Packages/Features/Sound.pck.st----!

----End fileIn of /home/marco/Desktop/linux64/Packages/Features/Cryptography-DigitalSignatures.pck.st----!

----End fileIn of /home/marco/Desktop/linux64/Packages/Features/Identities-UUID.pck.st----!

----End fileIn of /home/marco/Desktop/linux64/Packages/System/Network-Kernel.pck.st----!

----End fileIn of /home/marco/Desktop/Ingsoft-1/09-TusLibros/Iteracion4/WebClient.pck.st----!

----End fileIn of /home/marco/Desktop/Ingsoft-1/09-TusLibros/Iteracion4/TusLibros-Model Ejercicio it4.st----!

----End fileIn of /home/marco/Desktop/Ingsoft-1/09-TusLibros/Iteracion4/TusLibros-Model Ejercicio it4.st----!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'MSS 11/8/2022 18:56:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'MSS 11/8/2022 18:56:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'MSS 11/8/2022 18:56:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'MSS 11/8/2022 18:56:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'MSS 11/8/2022 18:56:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'MSS 11/8/2022 18:56:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'MSS 11/8/2022 18:56:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'MSS 11/8/2022 18:56:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'MSS 11/8/2022 18:56:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'MSS 11/8/2022 18:56:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'MSS 11/8/2022 18:56:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'MSS 11/8/2022 18:56:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'MSS 11/8/2022 18:56:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'MSS 11/8/2022 18:56:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'MSS 11/8/2022 18:56:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'MSS 11/8/2022 18:56:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'MSS 11/8/2022 18:56:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'MSS 11/8/2022 18:56:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'MSS 11/8/2022 18:56:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/8/2022 18:56:38'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'MSS 11/8/2022 18:56:40'!
FAILURE!

----End fileIn of /home/marco/Desktop/Ingsoft-1/09-TusLibros/TusLibros.st----!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'MSS 11/8/2022 18:57:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'MSS 11/8/2022 18:57:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'MSS 11/8/2022 18:57:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'MSS 11/8/2022 18:57:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'MSS 11/8/2022 18:57:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'MSS 11/8/2022 18:57:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'MSS 11/8/2022 18:57:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'MSS 11/8/2022 18:57:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'MSS 11/8/2022 18:57:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'MSS 11/8/2022 18:57:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'MSS 11/8/2022 18:57:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'MSS 11/8/2022 18:57:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'MSS 11/8/2022 18:57:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'MSS 11/8/2022 18:57:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'MSS 11/8/2022 18:57:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'MSS 11/8/2022 18:57:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'MSS 11/8/2022 18:57:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'MSS 11/8/2022 18:57:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'MSS 11/8/2022 18:57:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/8/2022 18:57:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'MSS 11/8/2022 18:57:07'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'MSS 11/8/2022 19:00:05' prior: 50597010!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphor |

	bookPerformance := Dictionary new.
	
	semaphor := Semaphore new.
	
	[totalSales :=(self totalSalesOf: anItem). semaphor signal.] fork.
	
	totalMoney := self totalMoneyRaisedBy: anItem. 
	
	semaphor wait.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'MSS 11/8/2022 19:05:15' prior: 50598446!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphor |

	bookPerformance := Dictionary new.
	
	semaphor := self sarasa:[totalSales :=(self totalSalesOf: anItem).].
	
	totalMoney := self totalMoneyRaisedBy: anItem. 
	
	semaphor wait.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/8/2022 19:05:25'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/8/2022 19:05:25'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'MSS 11/8/2022 19:05:51'!
sarasa: aString 
	self shouldBeImplemented.! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'MSS 11/8/2022 19:06:12' prior: 50598494!
sarasa: aClosure
	|semaphor|
	semaphor := Semaphore new.
	[aClosure value. semaphor signal.] fork.
	
	^semaphor. ! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/8/2022 19:06:19'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/8/2022 19:06:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'MSS 11/8/2022 19:06:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'MSS 11/8/2022 19:06:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'MSS 11/8/2022 19:06:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'MSS 11/8/2022 19:06:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'MSS 11/8/2022 19:06:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'MSS 11/8/2022 19:06:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'MSS 11/8/2022 19:06:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'MSS 11/8/2022 19:06:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'MSS 11/8/2022 19:06:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'MSS 11/8/2022 19:06:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'MSS 11/8/2022 19:06:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'MSS 11/8/2022 19:06:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'MSS 11/8/2022 19:06:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'MSS 11/8/2022 19:06:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'MSS 11/8/2022 19:06:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'MSS 11/8/2022 19:06:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'MSS 11/8/2022 19:06:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'MSS 11/8/2022 19:06:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'MSS 11/8/2022 19:06:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/8/2022 19:06:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'MSS 11/8/2022 19:06:34'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'MSS 11/8/2022 19:07:43' prior: 50597056!
storePerformance

	| totalMoney totalSales performance semaphor |
	
	performance := Dictionary new.
	

	
	semaphor := self sarasa:[totalSales := self totalSales.].
	
	totalMoney := self totalMoneyRaised. 
	
	semaphor wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'MSS 11/8/2022 19:07:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/8/2022 19:07:54'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'MSS 11/8/2022 19:09:21'!
createSemaphoreForFork: aClosure
	|semaphor|
	semaphor := Semaphore new.
	[aClosure value. semaphor signal.] fork.
	
	^semaphor. ! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MSS 11/8/2022 19:09:21' prior: 50598594!
storePerformance

	| totalMoney totalSales performance semaphor |
	
	performance := Dictionary new.
	

	
	semaphor := self createSemaphoreForFork:[totalSales := self totalSales.].
	
	totalMoney := self totalMoneyRaised. 
	
	semaphor wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MSS 11/8/2022 19:09:21' prior: 50598467!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphor |

	bookPerformance := Dictionary new.
	
	semaphor := self createSemaphoreForFork:[totalSales :=(self totalSalesOf: anItem).].
	
	totalMoney := self totalMoneyRaisedBy: anItem. 
	
	semaphor wait.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!methodRemoval: TusLibrosSystemFacade #sarasa: stamp: 'MSS 11/8/2022 19:09:21'!
sarasa: aClosure
	|semaphor|
	semaphor := Semaphore new.
	[aClosure value. semaphor signal.] fork.
	
	^semaphor. !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'MSS 11/8/2022 19:09:39' prior: 50598620!
createSemaphoreForFork: aClosure
	|semaphore|
	semaphore := Semaphore new.
	[aClosure value. semaphore signal.] fork.
	
	^semaphore. ! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'MSS 11/8/2022 19:09:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'MSS 11/8/2022 19:09:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'MSS 11/8/2022 19:09:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'MSS 11/8/2022 19:09:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'MSS 11/8/2022 19:09:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'MSS 11/8/2022 19:09:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'MSS 11/8/2022 19:09:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'MSS 11/8/2022 19:09:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'MSS 11/8/2022 19:09:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'MSS 11/8/2022 19:09:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'MSS 11/8/2022 19:09:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'MSS 11/8/2022 19:09:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'MSS 11/8/2022 19:09:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'MSS 11/8/2022 19:09:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'MSS 11/8/2022 19:09:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'MSS 11/8/2022 19:09:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'MSS 11/8/2022 19:09:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'MSS 11/8/2022 19:09:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'MSS 11/8/2022 19:09:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'MSS 11/8/2022 19:09:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'MSS 11/8/2022 19:09:46'!
PASSED!

----End fileIn of /home/marco/Desktop/Ingsoft-1/09-TusLibros/Iteracion4/TusLibrosREST Ejercicio it4.st----!

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open!

TusLibrosClientTestWindow open!

TusLibrosClientTestWindowModel!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'MSS 11/8/2022 19:26:29' prior: 50599291!
addToCart: aRequest

	| bookIsbn cartId quantity |

	(Delay forSeconds: 3) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		cartId := self cartIdFrom: requestFields.
		bookIsbn := self bookIsbnFrom: requestFields.
		quantity := self bookQuantityFrom: requestFields].
		
	self 
		answer: [
			systemFacade add: quantity of: bookIsbn toCartIdentifiedAs: cartId.
			'OK' ]
		to: aRequest 
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'MSS 11/8/2022 19:33:53' prior: 50599045!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp semaphore |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		

	semaphore := Semaphore new.
	
	[resp :=  WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict. semaphore signal] fork.
		
	semaphore wait.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]! !

WebServer reset!

WebServer reset!

TusLibrosClientTestWindow open!

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'NR 6/13/2022 07:05:17' prior: 50599496!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'MSS 11/8/2022 19:42:16' prior: 50599173!
addToCart

	| cartId bookIsbn semaphore |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		semaphore := Semaphore new.
		[restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId. semaphore signal.] fork.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId).
		semaphore wait.]! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'NR 6/13/2022 07:07:36' prior: 50599536!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem.!

t!

TusLibrosClientTestWindow open!
!TusLibrosServerRestInterface class methodsFor: 'installation' stamp: 'MSS 11/8/2022 19:47:10' prior: 50599440!
installForDefaultSystem

	"self installForDefaultSystem"
	
	| server port interface |
	
	interface := self on: self defaultSystem.
	
	"Esto es para poder acceder a la interface de manera global - Hernan"
	Smalltalk at: #CurrentTusLibrosRestInterface put: interface.
	
	port := 9999.
	server := WebServer reset default.
	server listenOn: port.
	server 
		addService: '/createCart' 
		action: [:request | interface createCart: request].
	server 
		addService: '/addToCart' 
		action: [:request | [interface addToCart: request] fork ].
	server
		addService: '/listCart' 
		action: [:request | interface listCart: request ].
	server
		addService: '/checkOutCart' 
		action: [:request | interface checkOutCart: request ].
	server
		addService: '/listPurchases' 
		action: [:request | interface listPurchases: request ].
	server useDebugErrorHandler ! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'MSS 11/8/2022 19:33:53' prior: 50599520!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp semaphore |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		

	semaphore := Semaphore new.
	
	[resp :=  WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict. semaphore signal] fork.
		
	semaphore wait.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'NR 6/13/2022 07:05:17' prior: 50599606!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'MSS 11/8/2022 19:58:53' prior: 50599555!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		[restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.] fork.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]! !

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'MSS 11/8/2022 20:00:26' prior: 50599640!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		[restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId).
		] fork.]! !

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'MSS 11/8/2022 20:02:10' prior: 50599186!
createCart

	| newCartId |
	
	newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
	[cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived.]fork.! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'MSS 11/8/2022 20:02:33' prior: 50599195!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		[currentSelectedCartContent := restInterface listCart: cartId.
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId] fork. ].! !

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open!